// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretInitParameters struct {

	// (String) The environment slug of the secret to modify/create
	// The environment slug of the secret to modify/create
	EnvSlug *string `json:"envSlug,omitempty" tf:"env_slug,omitempty"`

	// (String) The path to the folder where the given secret resides
	// The path to the folder where the given secret resides
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path,omitempty"`

	// (String) The name of the secret
	// The name of the secret
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) Tag ids to be attached for the secrets.
	// Tag ids to be attached for the secrets.
	TagIds []*string `json:"tagIds,omitempty" tf:"tag_ids,omitempty"`

	// (String, Sensitive) The value of the secret in plain text. This is required if value_wo is not set.
	// The value of the secret in plain text. This is required if `value_wo` is not set.
	ValueSecretRef *v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`

	// only secret. If set, the secret value will not be stored in state. This is required if value is not set.11.0 or higher.
	// The value of the secret in plain text as a write-only secret. If set, the secret value will not be stored in state. This is required if `value` is not set.11.0 or higher.
	ValueWo *string `json:"valueWo,omitempty" tf:"value_wo,omitempty"`

	// (Number) Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
	// Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
	ValueWoVersion *float64 `json:"valueWoVersion,omitempty" tf:"value_wo_version,omitempty"`

	// (String) The Infisical project ID
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type SecretObservation struct {

	// (String) The environment slug of the secret to modify/create
	// The environment slug of the secret to modify/create
	EnvSlug *string `json:"envSlug,omitempty" tf:"env_slug,omitempty"`

	// (String) The path to the folder where the given secret resides
	// The path to the folder where the given secret resides
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path,omitempty"`

	// (String) The ID of the secret
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	LastUpdated *string `json:"lastUpdated,omitempty" tf:"last_updated,omitempty"`

	// (String) The name of the secret
	// The name of the secret
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) Tag ids to be attached for the secrets.
	// Tag ids to be attached for the secrets.
	TagIds []*string `json:"tagIds,omitempty" tf:"tag_ids,omitempty"`

	// only secret. If set, the secret value will not be stored in state. This is required if value is not set.11.0 or higher.
	// The value of the secret in plain text as a write-only secret. If set, the secret value will not be stored in state. This is required if `value` is not set.11.0 or higher.
	ValueWo *string `json:"valueWo,omitempty" tf:"value_wo,omitempty"`

	// (Number) Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
	// Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
	ValueWoVersion *float64 `json:"valueWoVersion,omitempty" tf:"value_wo_version,omitempty"`

	// (String) The Infisical project ID
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type SecretParameters struct {

	// (String) The environment slug of the secret to modify/create
	// The environment slug of the secret to modify/create
	// +kubebuilder:validation:Optional
	EnvSlug *string `json:"envSlug,omitempty" tf:"env_slug,omitempty"`

	// (String) The path to the folder where the given secret resides
	// The path to the folder where the given secret resides
	// +kubebuilder:validation:Optional
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path,omitempty"`

	// (String) The name of the secret
	// The name of the secret
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) Tag ids to be attached for the secrets.
	// Tag ids to be attached for the secrets.
	// +kubebuilder:validation:Optional
	TagIds []*string `json:"tagIds,omitempty" tf:"tag_ids,omitempty"`

	// (String, Sensitive) The value of the secret in plain text. This is required if value_wo is not set.
	// The value of the secret in plain text. This is required if `value_wo` is not set.
	// +kubebuilder:validation:Optional
	ValueSecretRef *v1.SecretKeySelector `json:"valueSecretRef,omitempty" tf:"-"`

	// only secret. If set, the secret value will not be stored in state. This is required if value is not set.11.0 or higher.
	// The value of the secret in plain text as a write-only secret. If set, the secret value will not be stored in state. This is required if `value` is not set.11.0 or higher.
	// +kubebuilder:validation:Optional
	ValueWo *string `json:"valueWo,omitempty" tf:"value_wo,omitempty"`

	// (Number) Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
	// Used together with value_wo to trigger an update. Increment this value when an update to the value_wo is required.
	// +kubebuilder:validation:Optional
	ValueWoVersion *float64 `json:"valueWoVersion,omitempty" tf:"value_wo_version,omitempty"`

	// (String) The Infisical project ID
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	// +kubebuilder:validation:Optional
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

// SecretSpec defines the desired state of Secret
type SecretSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretInitParameters `json:"initProvider,omitempty"`
}

// SecretStatus defines the observed state of Secret.
type SecretStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Secret is the Schema for the Secrets API. Create secrets & save to Infisical
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infisical}
type Secret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.envSlug) || (has(self.initProvider) && has(self.initProvider.envSlug))",message="spec.forProvider.envSlug is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.folderPath) || (has(self.initProvider) && has(self.initProvider.folderPath))",message="spec.forProvider.folderPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SecretSpec   `json:"spec"`
	Status SecretStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretList contains a list of Secrets
type SecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Secret `json:"items"`
}

// Repository type metadata.
var (
	Secret_Kind             = "Secret"
	Secret_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Secret_Kind}.String()
	Secret_KindAPIVersion   = Secret_Kind + "." + CRDGroupVersion.String()
	Secret_GroupVersionKind = CRDGroupVersion.WithKind(Secret_Kind)
)

func init() {
	SchemeBuilder.Register(&Secret{}, &SecretList{})
}
