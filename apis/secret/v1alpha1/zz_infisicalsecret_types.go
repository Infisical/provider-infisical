// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InfisicalSecretInitParameters struct {

	// (String) The environment slug of the secret to modify/create
	// The environment slug of the secret to modify/create
	EnvSlug *string `json:"envSlug,omitempty" tf:"env_slug,omitempty"`

	// (String) The path to the folder where the given secret resides
	// The path to the folder where the given secret resides
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path,omitempty"`

	// (String) The name of the secret
	// The name of the secret
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) Tag ids to be attached for the secrets.
	// Tag ids to be attached for the secrets.
	TagIds []*string `json:"tagIds,omitempty" tf:"tag_ids,omitempty"`

	// (String, Sensitive) The value of the secret
	// The value of the secret
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef" tf:"-"`

	// (String) The Infisical project ID
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type InfisicalSecretObservation struct {

	// (String) The environment slug of the secret to modify/create
	// The environment slug of the secret to modify/create
	EnvSlug *string `json:"envSlug,omitempty" tf:"env_slug,omitempty"`

	// (String) The path to the folder where the given secret resides
	// The path to the folder where the given secret resides
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path,omitempty"`

	// (String) The ID of the secret
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	LastUpdated *string `json:"lastUpdated,omitempty" tf:"last_updated,omitempty"`

	// (String) The name of the secret
	// The name of the secret
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) Tag ids to be attached for the secrets.
	// Tag ids to be attached for the secrets.
	TagIds []*string `json:"tagIds,omitempty" tf:"tag_ids,omitempty"`

	// (String) The Infisical project ID
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

type InfisicalSecretParameters struct {

	// (String) The environment slug of the secret to modify/create
	// The environment slug of the secret to modify/create
	// +kubebuilder:validation:Optional
	EnvSlug *string `json:"envSlug,omitempty" tf:"env_slug,omitempty"`

	// (String) The path to the folder where the given secret resides
	// The path to the folder where the given secret resides
	// +kubebuilder:validation:Optional
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path,omitempty"`

	// (String) The name of the secret
	// The name of the secret
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) Tag ids to be attached for the secrets.
	// Tag ids to be attached for the secrets.
	// +kubebuilder:validation:Optional
	TagIds []*string `json:"tagIds,omitempty" tf:"tag_ids,omitempty"`

	// (String, Sensitive) The value of the secret
	// The value of the secret
	// +kubebuilder:validation:Optional
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef" tf:"-"`

	// (String) The Infisical project ID
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	// +kubebuilder:validation:Optional
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`
}

// InfisicalSecretSpec defines the desired state of InfisicalSecret
type InfisicalSecretSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InfisicalSecretParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InfisicalSecretInitParameters `json:"initProvider,omitempty"`
}

// InfisicalSecretStatus defines the observed state of InfisicalSecret.
type InfisicalSecretStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InfisicalSecretObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InfisicalSecret is the Schema for the InfisicalSecrets API. Create secrets & save to Infisical
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infisical}
type InfisicalSecret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.envSlug) || (has(self.initProvider) && has(self.initProvider.envSlug))",message="spec.forProvider.envSlug is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.folderPath) || (has(self.initProvider) && has(self.initProvider.folderPath))",message="spec.forProvider.folderPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.valueSecretRef)",message="spec.forProvider.valueSecretRef is a required parameter"
	Spec   InfisicalSecretSpec   `json:"spec"`
	Status InfisicalSecretStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InfisicalSecretList contains a list of InfisicalSecrets
type InfisicalSecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InfisicalSecret `json:"items"`
}

// Repository type metadata.
var (
	InfisicalSecret_Kind             = "InfisicalSecret"
	InfisicalSecret_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InfisicalSecret_Kind}.String()
	InfisicalSecret_KindAPIVersion   = InfisicalSecret_Kind + "." + CRDGroupVersion.String()
	InfisicalSecret_GroupVersionKind = CRDGroupVersion.WithKind(InfisicalSecret_Kind)
)

func init() {
	SchemeBuilder.Register(&InfisicalSecret{}, &InfisicalSecretList{})
}
