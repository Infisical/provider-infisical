// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectRoleInitParameters struct {

	// (String) The description for the new role. Defaults to an empty string.
	// The description for the new role. Defaults to an empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name for the new role
	// The name for the new role
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage. Legacy permissions (V1) is not supported for this resource.
	// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage. Legacy permissions (V1) is not supported for this resource.
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (String) The slug of the project to create role
	// The slug of the project to create role
	ProjectSlug *string `json:"projectSlug,omitempty" tf:"project_slug,omitempty"`

	// (String) The slug for the new role
	// The slug for the new role
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

type ProjectRoleObservation struct {

	// (String) The description for the new role. Defaults to an empty string.
	// The description for the new role. Defaults to an empty string.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of the role
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name for the new role
	// The name for the new role
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage. Legacy permissions (V1) is not supported for this resource.
	// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage. Legacy permissions (V1) is not supported for this resource.
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (String) The slug of the project to create role
	// The slug of the project to create role
	ProjectSlug *string `json:"projectSlug,omitempty" tf:"project_slug,omitempty"`

	// (String) The slug for the new role
	// The slug for the new role
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

type ProjectRoleParameters struct {

	// (String) The description for the new role. Defaults to an empty string.
	// The description for the new role. Defaults to an empty string.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The name for the new role
	// The name for the new role
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage. Legacy permissions (V1) is not supported for this resource.
	// The permissions assigned to the project role. Refer to the documentation here https://infisical.com/docs/internals/permissions for its usage. Legacy permissions (V1) is not supported for this resource.
	// +kubebuilder:validation:Optional
	Permissions *string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (String) The slug of the project to create role
	// The slug of the project to create role
	// +kubebuilder:validation:Optional
	ProjectSlug *string `json:"projectSlug,omitempty" tf:"project_slug,omitempty"`

	// (String) The slug for the new role
	// The slug for the new role
	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

// ProjectRoleSpec defines the desired state of ProjectRole
type ProjectRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectRoleInitParameters `json:"initProvider,omitempty"`
}

// ProjectRoleStatus defines the observed state of ProjectRole.
type ProjectRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectRole is the Schema for the ProjectRoles API. Create custom project roles & save to Infisical. Only Machine Identity authentication is supported for this resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infisical}
type ProjectRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectSlug) || (has(self.initProvider) && has(self.initProvider.projectSlug))",message="spec.forProvider.projectSlug is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.slug) || (has(self.initProvider) && has(self.initProvider.slug))",message="spec.forProvider.slug is a required parameter"
	Spec   ProjectRoleSpec   `json:"spec"`
	Status ProjectRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectRoleList contains a list of ProjectRoles
type ProjectRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectRole `json:"items"`
}

// Repository type metadata.
var (
	ProjectRole_Kind             = "ProjectRole"
	ProjectRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectRole_Kind}.String()
	ProjectRole_KindAPIVersion   = ProjectRole_Kind + "." + CRDGroupVersion.String()
	ProjectRole_GroupVersionKind = CRDGroupVersion.WithKind(ProjectRole_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectRole{}, &ProjectRoleList{})
}
