// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectGroupInitParameters struct {

	// (String) The id of the group.
	// The id of the group.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) The name of the group.
	// The name of the group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// (String) The id of the project.
	// The id of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) JSON array of role assignments for this group. Each role object must include a role_slug field. Example: [{"role_slug":"admin"},{"role_slug":"member"}].
	// JSON array of role assignments for this group. Each role object must include a `role_slug` field. Example: `[{"role_slug":"admin"},{"role_slug":"member"}]`.
	Roles *string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type ProjectGroupObservation struct {

	// (String) The id of the group.
	// The id of the group.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) The name of the group.
	// The name of the group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The membership Id of the project group
	// The membership Id of the project group
	MembershipID *string `json:"membershipId,omitempty" tf:"membership_id,omitempty"`

	// (String) The id of the project.
	// The id of the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) JSON array of role assignments for this group. Each role object must include a role_slug field. Example: [{"role_slug":"admin"},{"role_slug":"member"}].
	// JSON array of role assignments for this group. Each role object must include a `role_slug` field. Example: `[{"role_slug":"admin"},{"role_slug":"member"}]`.
	Roles *string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type ProjectGroupParameters struct {

	// (String) The id of the group.
	// The id of the group.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) The name of the group.
	// The name of the group.
	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// (String) The id of the project.
	// The id of the project.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) JSON array of role assignments for this group. Each role object must include a role_slug field. Example: [{"role_slug":"admin"},{"role_slug":"member"}].
	// JSON array of role assignments for this group. Each role object must include a `role_slug` field. Example: `[{"role_slug":"admin"},{"role_slug":"member"}]`.
	// +kubebuilder:validation:Optional
	Roles *string `json:"roles,omitempty" tf:"roles,omitempty"`
}

// ProjectGroupSpec defines the desired state of ProjectGroup
type ProjectGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectGroupInitParameters `json:"initProvider,omitempty"`
}

// ProjectGroupStatus defines the observed state of ProjectGroup.
type ProjectGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectGroup is the Schema for the ProjectGroups API. Create project groups & save to Infisical. Only Machine Identity authentication is supported for this data source
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infisical}
type ProjectGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roles) || (has(self.initProvider) && has(self.initProvider.roles))",message="spec.forProvider.roles is a required parameter"
	Spec   ProjectGroupSpec   `json:"spec"`
	Status ProjectGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectGroupList contains a list of ProjectGroups
type ProjectGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectGroup `json:"items"`
}

// Repository type metadata.
var (
	ProjectGroup_Kind             = "ProjectGroup"
	ProjectGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectGroup_Kind}.String()
	ProjectGroup_KindAPIVersion   = ProjectGroup_Kind + "." + CRDGroupVersion.String()
	ProjectGroup_GroupVersionKind = CRDGroupVersion.WithKind(ProjectGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectGroup{}, &ProjectGroupList{})
}
