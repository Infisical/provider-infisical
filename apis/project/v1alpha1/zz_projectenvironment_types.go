// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectEnvironmentInitParameters struct {

	// (String) The name of the environment
	// The name of the environment
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The position of the environment
	// The position of the environment
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// (String) The Infisical project ID
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	// +crossplane:generate:reference:type=github.com/infisical/provider-infisical/apis/project/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (String) The slug of the environment
	// The slug of the environment
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

type ProjectEnvironmentObservation struct {

	// (String) The ID of the environment
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the environment
	// The name of the environment
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The position of the environment
	// The position of the environment
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// (String) The Infisical project ID
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) The slug of the environment
	// The slug of the environment
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

type ProjectEnvironmentParameters struct {

	// (String) The name of the environment
	// The name of the environment
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The position of the environment
	// The position of the environment
	// +kubebuilder:validation:Optional
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// (String) The Infisical project ID
	// The Infisical project ID (Required for Machine Identity auth, and service tokens with multiple scopes)
	// +crossplane:generate:reference:type=github.com/infisical/provider-infisical/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (String) The slug of the environment
	// The slug of the environment
	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

// ProjectEnvironmentSpec defines the desired state of ProjectEnvironment
type ProjectEnvironmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectEnvironmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectEnvironmentInitParameters `json:"initProvider,omitempty"`
}

// ProjectEnvironmentStatus defines the observed state of ProjectEnvironment.
type ProjectEnvironmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProjectEnvironment is the Schema for the ProjectEnvironments API. Create project environment
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infisical}
type ProjectEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.slug) || (has(self.initProvider) && has(self.initProvider.slug))",message="spec.forProvider.slug is a required parameter"
	Spec   ProjectEnvironmentSpec   `json:"spec"`
	Status ProjectEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectEnvironmentList contains a list of ProjectEnvironments
type ProjectEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectEnvironment `json:"items"`
}

// Repository type metadata.
var (
	ProjectEnvironment_Kind             = "ProjectEnvironment"
	ProjectEnvironment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectEnvironment_Kind}.String()
	ProjectEnvironment_KindAPIVersion   = ProjectEnvironment_Kind + "." + CRDGroupVersion.String()
	ProjectEnvironment_GroupVersionKind = CRDGroupVersion.WithKind(ProjectEnvironment_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectEnvironment{}, &ProjectEnvironmentList{})
}
