// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessApprovalPolicyInitParameters struct {

	// (String) The enforcement level of the policy. This can either be hard or soft
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel *string `json:"enforcementLevel,omitempty" tf:"enforcement_level,omitempty"`

	// (List of String) The environments to apply the access approval policy to
	// The environments to apply the access approval policy to
	EnvironmentSlugs []*string `json:"environmentSlugs,omitempty" tf:"environment_slugs,omitempty"`

	// (List of String) Array of group IDs belonging to the groups to assign as approvers. Note either group IDs, usernames, or both must be provided.
	// Array of group IDs belonging to the groups to assign as approvers. Note either group IDs, usernames, or both must be provided.
	GroupApprovers []*string `json:"groupApprovers,omitempty" tf:"group_approvers,omitempty"`

	// (String) The name of the access approval policy
	// The name of the access approval policy
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The ID of the project to add the access approval policy
	// The ID of the project to add the access approval policy
	// +crossplane:generate:reference:type=github.com/infisical/provider-infisical/apis/project/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Number) The number of required approvers
	// The number of required approvers
	RequiredApprovals *float64 `json:"requiredApprovals,omitempty" tf:"required_approvals,omitempty"`

	// (String) The secret path to apply the access approval policy to
	// The secret path to apply the access approval policy to
	SecretPath *string `json:"secretPath,omitempty" tf:"secret_path,omitempty"`

	// (List of String) Array of usernames belonging to the users to assign as approvers
	// Array of usernames belonging to the users to assign as approvers
	UserApprovers []*string `json:"userApprovers,omitempty" tf:"user_approvers,omitempty"`
}

type AccessApprovalPolicyObservation struct {

	// (String) The enforcement level of the policy. This can either be hard or soft
	// The enforcement level of the policy. This can either be hard or soft
	EnforcementLevel *string `json:"enforcementLevel,omitempty" tf:"enforcement_level,omitempty"`

	// (List of String) The environments to apply the access approval policy to
	// The environments to apply the access approval policy to
	EnvironmentSlugs []*string `json:"environmentSlugs,omitempty" tf:"environment_slugs,omitempty"`

	// (List of String) Array of group IDs belonging to the groups to assign as approvers. Note either group IDs, usernames, or both must be provided.
	// Array of group IDs belonging to the groups to assign as approvers. Note either group IDs, usernames, or both must be provided.
	GroupApprovers []*string `json:"groupApprovers,omitempty" tf:"group_approvers,omitempty"`

	// (String) The ID of the access approval policy
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the access approval policy
	// The name of the access approval policy
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The ID of the project to add the access approval policy
	// The ID of the project to add the access approval policy
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Number) The number of required approvers
	// The number of required approvers
	RequiredApprovals *float64 `json:"requiredApprovals,omitempty" tf:"required_approvals,omitempty"`

	// (String) The secret path to apply the access approval policy to
	// The secret path to apply the access approval policy to
	SecretPath *string `json:"secretPath,omitempty" tf:"secret_path,omitempty"`

	// (List of String) Array of usernames belonging to the users to assign as approvers
	// Array of usernames belonging to the users to assign as approvers
	UserApprovers []*string `json:"userApprovers,omitempty" tf:"user_approvers,omitempty"`
}

type AccessApprovalPolicyParameters struct {

	// (String) The enforcement level of the policy. This can either be hard or soft
	// The enforcement level of the policy. This can either be hard or soft
	// +kubebuilder:validation:Optional
	EnforcementLevel *string `json:"enforcementLevel,omitempty" tf:"enforcement_level,omitempty"`

	// (List of String) The environments to apply the access approval policy to
	// The environments to apply the access approval policy to
	// +kubebuilder:validation:Optional
	EnvironmentSlugs []*string `json:"environmentSlugs,omitempty" tf:"environment_slugs,omitempty"`

	// (List of String) Array of group IDs belonging to the groups to assign as approvers. Note either group IDs, usernames, or both must be provided.
	// Array of group IDs belonging to the groups to assign as approvers. Note either group IDs, usernames, or both must be provided.
	// +kubebuilder:validation:Optional
	GroupApprovers []*string `json:"groupApprovers,omitempty" tf:"group_approvers,omitempty"`

	// (String) The name of the access approval policy
	// The name of the access approval policy
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The ID of the project to add the access approval policy
	// The ID of the project to add the access approval policy
	// +crossplane:generate:reference:type=github.com/infisical/provider-infisical/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (Number) The number of required approvers
	// The number of required approvers
	// +kubebuilder:validation:Optional
	RequiredApprovals *float64 `json:"requiredApprovals,omitempty" tf:"required_approvals,omitempty"`

	// (String) The secret path to apply the access approval policy to
	// The secret path to apply the access approval policy to
	// +kubebuilder:validation:Optional
	SecretPath *string `json:"secretPath,omitempty" tf:"secret_path,omitempty"`

	// (List of String) Array of usernames belonging to the users to assign as approvers
	// Array of usernames belonging to the users to assign as approvers
	// +kubebuilder:validation:Optional
	UserApprovers []*string `json:"userApprovers,omitempty" tf:"user_approvers,omitempty"`
}

// AccessApprovalPolicySpec defines the desired state of AccessApprovalPolicy
type AccessApprovalPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessApprovalPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccessApprovalPolicyInitParameters `json:"initProvider,omitempty"`
}

// AccessApprovalPolicyStatus defines the observed state of AccessApprovalPolicy.
type AccessApprovalPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessApprovalPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AccessApprovalPolicy is the Schema for the AccessApprovalPolicys API. Create access approval policy for your projects
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infisical}
type AccessApprovalPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environmentSlugs) || (has(self.initProvider) && has(self.initProvider.environmentSlugs))",message="spec.forProvider.environmentSlugs is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.requiredApprovals) || (has(self.initProvider) && has(self.initProvider.requiredApprovals))",message="spec.forProvider.requiredApprovals is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secretPath) || (has(self.initProvider) && has(self.initProvider.secretPath))",message="spec.forProvider.secretPath is a required parameter"
	Spec   AccessApprovalPolicySpec   `json:"spec"`
	Status AccessApprovalPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessApprovalPolicyList contains a list of AccessApprovalPolicys
type AccessApprovalPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessApprovalPolicy `json:"items"`
}

// Repository type metadata.
var (
	AccessApprovalPolicy_Kind             = "AccessApprovalPolicy"
	AccessApprovalPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessApprovalPolicy_Kind}.String()
	AccessApprovalPolicy_KindAPIVersion   = AccessApprovalPolicy_Kind + "." + CRDGroupVersion.String()
	AccessApprovalPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AccessApprovalPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessApprovalPolicy{}, &AccessApprovalPolicyList{})
}
