// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretSyncGithubInitParameters struct {

	// (Boolean) Whether secrets should be automatically synced when changes occur at the source location or not.
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `json:"autoSyncEnabled,omitempty" tf:"auto_sync_enabled,omitempty"`

	// (String) The ID of the github Connection to use for syncing.
	// The ID of the github Connection to use for syncing.
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (String) An optional description for the Github sync.
	// An optional description for the Github sync.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The destination configuration for the secret sync. Must be a JSON string with the following structure:
	// The destination configuration for the secret sync. Must be a JSON string with the following structure:
	//
	// - `repository_environment` (optional): The environment to sync the secrets to, required if scope is `repository-environment`
	// - `repository_name` (optional): The repository to sync the secrets to, required if scope is `repository` or `repository-environment`. This is only the name of the repository, without the repository owner included. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `go-sdk` here.
	// - `repository_owner` (optional): The owner of the Github repository, required if scope is `repository`, `repository-environment`, or `organization`. This is the organization name, or the username for personal repositories. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `Infisical` here.
	// - `scope` (required): The scope to sync the secrets to, repository|organization
	// - `selected_repository_ids` (optional): The repository ids to sync the secrets to, required if scope is `organization` and the visibility field is set to `selected`
	// - `visibility` (optional): The visibility of the Github repository, required if scope is `organization`. Accepted values are: `all`|`private`|`selected`
	DestinationConfig *string `json:"destinationConfig,omitempty" tf:"destination_config,omitempty"`

	// (String) The slug of the project environment to sync secrets from.
	// The slug of the project environment to sync secrets from.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// friendly.
	// The name of the Github sync to create. Must be slug-friendly.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The ID of the Infisical project to create the sync in.
	// The ID of the Infisical project to create the sync in.
	// +crossplane:generate:reference:type=github.com/infisical/provider-infisical/apis/project/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (String) The folder path to sync secrets from.
	// The folder path to sync secrets from.
	SecretPath *string `json:"secretPath,omitempty" tf:"secret_path,omitempty"`

	// (String) Parameters to modify how secrets are synced. Must be a JSON string with the following structure:
	// Parameters to modify how secrets are synced. Must be a JSON string with the following structure:
	//
	// - `disable_secret_deletion` (optional): When set to true, Infisical will not remove secrets from Github. Enable this option if you intend to manage some secrets manually outside of Infisical.
	// - `initial_sync_behavior` (required): Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination
	// - `key_schema` (optional): The format to use for structuring secret keys in the Github destination.
	SyncOptions *string `json:"syncOptions,omitempty" tf:"sync_options,omitempty"`
}

type SecretSyncGithubObservation struct {

	// (Boolean) Whether secrets should be automatically synced when changes occur at the source location or not.
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	AutoSyncEnabled *bool `json:"autoSyncEnabled,omitempty" tf:"auto_sync_enabled,omitempty"`

	// (String) The ID of the github Connection to use for syncing.
	// The ID of the github Connection to use for syncing.
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (String) An optional description for the Github sync.
	// An optional description for the Github sync.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The destination configuration for the secret sync. Must be a JSON string with the following structure:
	// The destination configuration for the secret sync. Must be a JSON string with the following structure:
	//
	// - `repository_environment` (optional): The environment to sync the secrets to, required if scope is `repository-environment`
	// - `repository_name` (optional): The repository to sync the secrets to, required if scope is `repository` or `repository-environment`. This is only the name of the repository, without the repository owner included. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `go-sdk` here.
	// - `repository_owner` (optional): The owner of the Github repository, required if scope is `repository`, `repository-environment`, or `organization`. This is the organization name, or the username for personal repositories. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `Infisical` here.
	// - `scope` (required): The scope to sync the secrets to, repository|organization
	// - `selected_repository_ids` (optional): The repository ids to sync the secrets to, required if scope is `organization` and the visibility field is set to `selected`
	// - `visibility` (optional): The visibility of the Github repository, required if scope is `organization`. Accepted values are: `all`|`private`|`selected`
	DestinationConfig *string `json:"destinationConfig,omitempty" tf:"destination_config,omitempty"`

	// (String) The slug of the project environment to sync secrets from.
	// The slug of the project environment to sync secrets from.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The ID of the Github secret sync
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// friendly.
	// The name of the Github sync to create. Must be slug-friendly.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The ID of the Infisical project to create the sync in.
	// The ID of the Infisical project to create the sync in.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) The folder path to sync secrets from.
	// The folder path to sync secrets from.
	SecretPath *string `json:"secretPath,omitempty" tf:"secret_path,omitempty"`

	// (String) Parameters to modify how secrets are synced. Must be a JSON string with the following structure:
	// Parameters to modify how secrets are synced. Must be a JSON string with the following structure:
	//
	// - `disable_secret_deletion` (optional): When set to true, Infisical will not remove secrets from Github. Enable this option if you intend to manage some secrets manually outside of Infisical.
	// - `initial_sync_behavior` (required): Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination
	// - `key_schema` (optional): The format to use for structuring secret keys in the Github destination.
	SyncOptions *string `json:"syncOptions,omitempty" tf:"sync_options,omitempty"`
}

type SecretSyncGithubParameters struct {

	// (Boolean) Whether secrets should be automatically synced when changes occur at the source location or not.
	// Whether secrets should be automatically synced when changes occur at the source location or not.
	// +kubebuilder:validation:Optional
	AutoSyncEnabled *bool `json:"autoSyncEnabled,omitempty" tf:"auto_sync_enabled,omitempty"`

	// (String) The ID of the github Connection to use for syncing.
	// The ID of the github Connection to use for syncing.
	// +kubebuilder:validation:Optional
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (String) An optional description for the Github sync.
	// An optional description for the Github sync.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The destination configuration for the secret sync. Must be a JSON string with the following structure:
	// The destination configuration for the secret sync. Must be a JSON string with the following structure:
	//
	// - `repository_environment` (optional): The environment to sync the secrets to, required if scope is `repository-environment`
	// - `repository_name` (optional): The repository to sync the secrets to, required if scope is `repository` or `repository-environment`. This is only the name of the repository, without the repository owner included. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `go-sdk` here.
	// - `repository_owner` (optional): The owner of the Github repository, required if scope is `repository`, `repository-environment`, or `organization`. This is the organization name, or the username for personal repositories. As an example if you have a repository called Infisical/go-sdk, you would only need to provide `Infisical` here.
	// - `scope` (required): The scope to sync the secrets to, repository|organization
	// - `selected_repository_ids` (optional): The repository ids to sync the secrets to, required if scope is `organization` and the visibility field is set to `selected`
	// - `visibility` (optional): The visibility of the Github repository, required if scope is `organization`. Accepted values are: `all`|`private`|`selected`
	// +kubebuilder:validation:Optional
	DestinationConfig *string `json:"destinationConfig,omitempty" tf:"destination_config,omitempty"`

	// (String) The slug of the project environment to sync secrets from.
	// The slug of the project environment to sync secrets from.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// friendly.
	// The name of the Github sync to create. Must be slug-friendly.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The ID of the Infisical project to create the sync in.
	// The ID of the Infisical project to create the sync in.
	// +crossplane:generate:reference:type=github.com/infisical/provider-infisical/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// (String) The folder path to sync secrets from.
	// The folder path to sync secrets from.
	// +kubebuilder:validation:Optional
	SecretPath *string `json:"secretPath,omitempty" tf:"secret_path,omitempty"`

	// (String) Parameters to modify how secrets are synced. Must be a JSON string with the following structure:
	// Parameters to modify how secrets are synced. Must be a JSON string with the following structure:
	//
	// - `disable_secret_deletion` (optional): When set to true, Infisical will not remove secrets from Github. Enable this option if you intend to manage some secrets manually outside of Infisical.
	// - `initial_sync_behavior` (required): Specify how Infisical should resolve the initial sync to the destination. Supported options: overwrite-destination
	// - `key_schema` (optional): The format to use for structuring secret keys in the Github destination.
	// +kubebuilder:validation:Optional
	SyncOptions *string `json:"syncOptions,omitempty" tf:"sync_options,omitempty"`
}

// SecretSyncGithubSpec defines the desired state of SecretSyncGithub
type SecretSyncGithubSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretSyncGithubParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecretSyncGithubInitParameters `json:"initProvider,omitempty"`
}

// SecretSyncGithubStatus defines the observed state of SecretSyncGithub.
type SecretSyncGithubStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretSyncGithubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SecretSyncGithub is the Schema for the SecretSyncGithubs API. Create and manage Github secret syncs
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infisical}
type SecretSyncGithub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectionId) || (has(self.initProvider) && has(self.initProvider.connectionId))",message="spec.forProvider.connectionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinationConfig) || (has(self.initProvider) && has(self.initProvider.destinationConfig))",message="spec.forProvider.destinationConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environment) || (has(self.initProvider) && has(self.initProvider.environment))",message="spec.forProvider.environment is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secretPath) || (has(self.initProvider) && has(self.initProvider.secretPath))",message="spec.forProvider.secretPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.syncOptions) || (has(self.initProvider) && has(self.initProvider.syncOptions))",message="spec.forProvider.syncOptions is a required parameter"
	Spec   SecretSyncGithubSpec   `json:"spec"`
	Status SecretSyncGithubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretSyncGithubList contains a list of SecretSyncGithubs
type SecretSyncGithubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretSyncGithub `json:"items"`
}

// Repository type metadata.
var (
	SecretSyncGithub_Kind             = "SecretSyncGithub"
	SecretSyncGithub_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretSyncGithub_Kind}.String()
	SecretSyncGithub_KindAPIVersion   = SecretSyncGithub_Kind + "." + CRDGroupVersion.String()
	SecretSyncGithub_GroupVersionKind = CRDGroupVersion.WithKind(SecretSyncGithub_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretSyncGithub{}, &SecretSyncGithubList{})
}
